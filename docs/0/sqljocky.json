{"dependencies":[{"kind":"library","id":"results","comment":"\nresults is exported by sqljocky, so there is no need to\nseparately import this library.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"Row","refId":"results/Row"}]}],"kind":"class","name":"Results","id":"Results","comment":"\nHolds query results.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"insertId","id":"insertId","comment":"\nThe id of the inserted row, or [null] if no row was inserted.\n","line":"10"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"affectedRows","id":"affectedRows","comment":"\nThe number of affected rows in an update statement, or\n[null] in other cases.\n","line":"16"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Field","refId":"results/Field"}]},"kind":"property","name":"fields","id":"fields","comment":"\nA list of the fields returned by the query.\n","line":"21"}],"uri":"file:///home/james/devroot/sqljocky/lib/src/results/results.dart","line":"6"},{"superclass":{"name":"ListBase","refId":"dart.collection/ListBase","arguments":[]},"isAbstract":true,"kind":"class","name":"Row","id":"Row","comment":"\nA row of data. Fields can be retrieved by index, or by name.\n\nWhen retrieving a field by name, only fields which are valid Dart\nidentifiers, and which aren't part of the List object, can be used.\n","uri":"file:///home/james/devroot/sqljocky/lib/src/results/row.dart","line":"9"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Field","id":"Field","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"catalog","id":"catalog","line":"5"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"db","id":"db","line":"6"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"table","id":"table","line":"7"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"orgTable","id":"orgTable","line":"8"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"name","id":"name","line":"9"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"orgName","id":"orgName","line":"10"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"characterSet","id":"characterSet","line":"11"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"12"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"type","id":"type","line":"13"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"flags","id":"flags","line":"14"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"decimals","id":"decimals","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"defaultValue","id":"defaultValue","line":"16"}],"uri":"file:///home/james/devroot/sqljocky/lib/src/results/field.dart","line":"4"}],"uri":"file:///home/james/devroot/sqljocky/lib/src/results.dart","line":"5"},{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villians = new Set();\n    villians.add('Joker');\n    villians.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"EfficientLength","refId":"dart._collection.dev/EfficientLength"},{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]}],"kind":"class","name":"List","id":"List","comment":"\nAn indexable collection of objects with a length.\n\nSubclasses of this class implement different kinds of lists.\nThe most common kinds of lists are:\n\n* Fixed-length list.\n  An error occurs when attempting to use operations\n  that can change the length of the list.\n\n* Growable list. Full implementation of the API defined in this class.\n\nThe following code illustrates that some List implementations support\nonly a subset of the API.\n\n    List<int> fixedLengthList = new List(5);\n    fixedLengthList.length = 0;  // Error\n    fixedLengthList.add(499);    // Error\n    fixedLengthList[0] = 87;\n    List<int> growableList = [1, 2];\n    growableList.length = 0;\n    growableList.add(499);\n    growableList[0] = 87;\n\nLists are [Iterable]. Iteration occurs over values in index order. Changing\nthe values does not affect iteration, but changing the valid\nindices&mdash;that is, changing the list's length&mdash;between iteration\nsteps causes a [ConcurrentModificationError]. This means that only growable\nlists can throw ConcurrentModificationError. If the length changes\ntemporarily and is restored before continuing the iteration, the iterator\ndoes not detect it.\n\nIt is generally not allowed to modify the list's length (adding or removing\nelements) while an operation on the list is being performed,\nfor example during a call to [forEach] or [sort].\nChanging the list's length while it is being iterated, either by iterating it\ndirectly or through iterating an `Iterable` that is backed by the list, will\nbreak the iteration.\n","children":[{"returnType":{"name":"E","refId":"dart.core/List/E"},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","comment":"\nReturns the object at the given [index] in the list\nor throws a [RangeError] if [index] is out of bounds.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"128"},{"returnType":{"name":"void","refId":"void"},"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","comment":"\nSets the value at the given [index] in the list to [value]\nor throws a [RangeError] if [index] is out of bounds.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"value","id":"value"}],"line":"134"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"length=","id":"length=1()","comment":"\nChanges the length of this list.\n\nIf [newLength] is greater than\nthe current length, entries are initialized to [:null:].\n\nThrows an [UnsupportedError] if the list is fixed-length.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"newLength","id":"newLength"}],"line":"151"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","comment":"\nAdds [value] to the end of this list,\nextending the length by one.\n\nThrows an [UnsupportedError] if the list is fixed-length.\n","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"value","id":"value"}],"line":"159"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","comment":"\nAppends all objects of [iterable] to the end of this list.\n\nExtends the length of the list by the number of objects in [iterable].\nThrows an [UnsupportedError] if this list is fixed-length.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"167"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"sort","id":"sort1()","comment":"\nSorts this list according to the order specified by the [compare] function.\n\nThe [compare] function must act as a [Comparator].\n\n    List<String> numbers = ['one', 'two', 'three', 'four'];\n    // Sort from shortest to longest.\n    numbers.sort((x, y) => x.length.compareTo(y.length));\n    numbers.join(', '); // 'one, two, four, three'\n\nThe default List implementations use [Comparable.compare] if\n[compare] is omitted.\n\n    List<int> nums = [13, 2, -11];\n    nums.sort();\n         nums.join(', '); // '-11, 2, 13'\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"a","id":"a","uri":"dart-sdk/lib/core/list.dart","line":"191"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"b","id":"b","uri":"dart-sdk/lib/core/list.dart","line":"191"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"191"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"shuffle","id":"shuffle1()","comment":"\nShuffles the elements of this list randomly.\n","children":[{"ref":{"name":"Random","refId":"dart.math/Random"},"isOptional":true,"kind":"param","name":"random","id":"random"}],"line":"196"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"indexOf","id":"indexOf2()","comment":"\nReturns the first index of [element] in this list.\n\nSearches the list from index [start] to the end of the list.\nThe first time an object [:o:] is encountered so that [:o == element:],\nthe index of [:o:] is returned.\n\n    List<String> notes = ['do', 're', 'mi', 're'];\n    notes.indexOf('re');    // 1\n    notes.indexOf('re', 2); // 3\n\nReturns -1 if [element] is not found.\n\n    notes.indexOf('fa');    // -1\n","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"start","id":"start"}],"line":"213"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"lastIndexOf","id":"lastIndexOf2()","comment":"\nReturns the last index of [element] in this list.\n\nSearches the list backwards from index [start] to 0.\n\nThe first time an object [:o:] is encountered so that [:o == element:],\nthe index of [:o:] is returned.\n\n    List<String> notes = ['do', 're', 'mi', 're'];\n    notes.lastIndexOf('re', 2); // 1\n\nIf [start] is not provided, this method searches from the end of the\nlist./Returns\n\n    notes.lastIndexOf('re');  // 3\n\nReturns -1 if [element] is not found.\n\n    notes.lastIndexOf('fa');  // -1\n","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"start","id":"start"}],"line":"235"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","comment":"\nRemoves all objects from this list;\nthe length of the list becomes zero.\n\nThrows an [UnsupportedError], and retains all objects, if this\nis a fixed-length list.\n","line":"244"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insert","id":"insert2()","comment":"\nInserts the object at position [index] in this list.\n\nThis increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.\n\nAn error occurs if the [index] is less than 0 or greater than length.\nAn [UnsupportedError] occurs if the list is fixed-length.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element"}],"line":"255"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insertAll","id":"insertAll2()","comment":"\nInserts all objects of [iterable] at position [index] in this list.\n\nThis increases the length of the list by the length of [iterable] and\nshifts all later objects towards the end of the list.\n\nAn error occurs if the [index] is less than 0 or greater than length.\nAn [UnsupportedError] occurs if the list is fixed-length.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"266"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAll","id":"setAll2()","comment":"\nOverwrites objects of `this` with the objects of [iterable], starting\nat position [index] in this list.\n\n    List<String> list = ['a', 'b', 'c'];\n    list.setAll(1, ['bee', 'sea']);\n    list.join(', '); // 'a, bee, sea'\n\nThis operation does not increase the length of `this`.\n\nAn error occurs if the [index] is less than 0 or greater than length.\nAn error occurs if the [iterable] is longer than [length] - [index].\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"281"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","comment":"\nRemoves the first occurence of [value] from this list.\n\nReturns true if [value] was in the list, false otherwise.\n\n    List<String> parts = ['head', 'shoulders', 'knees', 'toes'];\n    parts.remove('head'); // true\n    parts.join(', ');     // 'shoulders, knees, toes'\n\nThe method has no effect if [value] was not in the list.\n\n    // Note: 'head' has already been removed.\n    parts.remove('head'); // false\n    parts.join(', ');     // 'shoulders, knees, toes'\n\nAn [UnsupportedError] occurs if the list is fixed-length.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"300"},{"returnType":{"name":"E","refId":"dart.core/List/E"},"kind":"method","name":"removeAt","id":"removeAt1()","comment":"\nRemoves the object at position [index] from this list.\n\nThis method reduces the length of `this` by one and moves all later objects\ndown by one position.\n\nReturns the removed object.\n\n* Throws an [ArgumentError] if [index] is not an [int].\n* Throws a [RangeError] if the [index] is out of range for this list.\n* Throws an [UnsupportedError], and doesn't remove the object,\nif this is a fixed-length list.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"315"},{"returnType":{"name":"E","refId":"dart.core/List/E"},"kind":"method","name":"removeLast","id":"removeLast0()","comment":"\nPops and returns the last object in this list.\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","line":"322"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","comment":"\nRemoves all objects from this list that satisfy [test].\n\nAn object [:o:] satisfies [test] if [:test(o):] is true.\n\n    List<String> numbers = ['one', 'two', 'three', 'four'];\n    numbers.removeWhere((item) => item.length == 3);\n    numbers.join(', '); // 'three, four'\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/list.dart","line":"335"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"335"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","comment":"\nRemoves all objects from this list that fail to satisfy [test].\n\nAn object [:o:] satisfies [test] if [:test(o):] is true.\n\n    List<String> numbers = ['one', 'two', 'three', 'four'];\n    numbers.retainWhere((item) => item.length == 3);\n    numbers.join(', '); // 'one, two'\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/list.dart","line":"348"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"348"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"method","name":"sublist","id":"sublist2()","comment":"\nReturns a new list containing the objects from [start] inclusive to [end]\nexclusive.\n\n    List<String> colors = ['red', 'green', 'blue', 'orange', 'pink'];\n    colors.sublist(1, 3); // ['green', 'blue']\n\nIf [end] is omitted, the [length] of `this` is used.\n\n    colors.sublist(1);  // ['green', 'blue', 'orange', 'pink']\n\nAn error occurs if [start] is outside the range `0` .. `length` or if\n[end] is outside the range `start` .. `length`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"end","id":"end"}],"line":"364"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"method","name":"getRange","id":"getRange2()","comment":"\nReturns an [Iterable] that iterates over the objects in the range\n[start] inclusive to [end] exclusive.\n\nAn error occurs if [end] is before [start].\n\nAn error occurs if the [start] and [end] are not valid ranges at the time\nof the call to this method. The returned [Iterable] behaves like\n`skip(start).take(end - start)`. That is, it does not throw exceptions\nif `this` changes size.\n\n    List<String> colors = ['red', 'green', 'blue', 'orange', 'pink'];\n    Iterable<String> range = colors.getRange(1, 4);\n    range.join(', ');  // 'green, blue, orange'\n    colors.length = 3;\n    range.join(', ');  // 'green, blue'\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"383"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setRange","id":"setRange4()","comment":"\nCopies the objects of [iterable], skipping [skipCount] objects first,\ninto the range [start] inclusive to [end] exclusive of `this`.\n\n    List<int> list1 = [1, 2, 3, 4];\n    List<int> list2 = [5, 6, 7, 8, 9];\n    // Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n    // of list1.\n    list1.setRange(1, 3, list2, 3);\n    list1.join(', '); // '1, 8, 9, 4'\n\nIf [start] equals [end] and [start]..[end] represents a legal range, this\nmethod has no effect.\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\nAn error occurs if the [iterable] does not have enough objects after\nskipping [skipCount] objects.\n\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"skipCount","id":"skipCount"}],"line":"404"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeRange","id":"removeRange2()","comment":"\nRemoves the objects in the range [start] inclusive to [end] exclusive.\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\nThrows an [UnsupportedError] if this is a fixed-length list.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"412"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fillRange","id":"fillRange3()","comment":"\nSets the objects in the range [start] inclusive to [end] exclusive\nto the given [fillValue].\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"E","refId":"dart.core/List/E"},"isOptional":true,"kind":"param","name":"fillValue","id":"fillValue"}],"line":"420"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"replaceRange","id":"replaceRange3()","comment":"\nRemoves the objects in the range [start] inclusive to [end] exclusive\nand replaces them with the contents of the [iterable].\n\n    List<int> list = [1, 2, 3, 4];\n    list.replaceRange(1, 3, [6, 7]);\n    list.join(', '); // '1, 6, 7, 4'\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"432"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"int","refId":"dart.core/int"},{"name":"E","refId":"dart.core/List/E"}]},"kind":"method","name":"asMap","id":"asMap0()","comment":"\nReturns an unmodifiable [Map] view of `this`.\n\nThe map uses the indices of this list as keys and the corresponding objects\nas values. The `Map.keys` [Iterable] iterates the indices of this list\nin numerical order.\n\n    List<String> words = ['fee', 'fi', 'fo', 'fum'];\n    Map<int, String> map = words.asMap();\n    map[0] + map[1];   // 'feefi';\n    map.keys.toList(); // [0, 1, 2, 3]\n","line":"446"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of objects in this list.\n\nThe valid indices for a list are `0` through `length - 1`.\n","line":"141"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"property","name":"reversed","id":"reversed","comment":"\nReturns an [Iterable] of the objects in this list in reverse order.\n","line":"172"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"","id":"1()","comment":"\nCreates a list of the given length.\n\nThe created list is fixed-length if [length] is provided.\n\n    List fixedLengthList = new List(3);\n    fixedLengthList.length;     // 3\n    fixedLengthList.length = 1; // Error\n\n\nThe list has length 0 and is growable if [length] is omitted.\n\n    List growableList = new List();\n    growableList.length; // 0;\n    growableList.length = 3;\n\nThe [length] must not be negative or null, if it is provided.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length"}],"line":"65"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"filled","id":"filled2()","comment":"\nCreates a fixed-length list of the given length, and initializes the\nvalue at each position with [fill]:\n\n    new List<int>.filled(3, 0); // [0, 0, 0]\n\nThe [length] must not be negative or null.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"length","id":"length"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"fill","id":"fill"}],"line":"75"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"from","id":"from2()","comment":"\nCreates a list and initializes it using the contents of [other].\n\nThe [Iterator] of [other] provides the order of the objects.\n\nThis constructor returns a growable list if [growable] is true;\notherwise, it returns a fixed-length list.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"other","id":"other"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"85"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"generate","id":"generate3()","comment":"\nGenerates a list of values.\n\nCreates a list with [length] positions and fills it with values created by\ncalling [generator] for each index in the range `0` .. `length - 1`\nin increasing order.\n\n    new List<int>.generate(3, (int index) => index * index); // [0, 1, 4]\n\nThe created list is fixed-length unless [growable] is true.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"length","id":"length"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"generator","id":"generator","children":[{"returnType":{"name":"E","refId":"dart.core/List/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index","uri":"dart-sdk/lib/core/list.dart","line":"110"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable","line":"111"}],"line":"110"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/list.dart","line":"46"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Iterable","id":"Iterable","comment":"\nAn object that uses an [Iterator] to serve objects one at a time.\n\nYou can iterate over all objects served by an Iterable object\nusing the for-in loop construct.\nFor example, you can iterate over all of the keys in a [Map],\nbecause Map keys are iterable.\n\n    Map kidsBooks = {'Matilda': 'Roald Dahl',\n                     'Green Eggs and Ham': 'Dr Seuss',\n                     'Where the Wild Things Are': 'Maurice Sendak'};\n    for (var book in kidsBooks.keys) {\n      print('$book was written by ${kidsBooks[book]}');\n    }\n\nThe [List] class and the [Set] class implement this interface,\nas do classes in the [dart:collection](#dart-collection) library.\n\nYou can implement Iterable in your own class.\nIf you do, then an instance of your Iterable class\ncan be the right-hand side of a for-in construct.\n\nSome subclasss of `Iterable` can be modified. It is generally not allowed\nto modify such collections while they are being iterated. Doing so will break\nthe iteration, which is typically signalled by throwing a\n[ConcurrentModificationError] when it is detected.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","comment":"\nReturns a lazy [Iterable] where each element [:e:] of `this` is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"66"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"66"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"where","id":"where1()","comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [test].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [test] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the returned [Iterable] will invoke the supplied\nfunction [test] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"78"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"78"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","comment":"\nExpands each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable runs through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and calls [f] for each element\nof this every time it's iterated.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"89"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"89"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","comment":"\nReturns true if the collection contains an element equal to [element].\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"94"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\nApplies the function [f] to each element of this collection.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"99"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"99"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"reduce","id":"reduce1()","comment":"\nReduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.\n\nExample of calculating the sum of an iterable:\n\n    iterable.reduce((value, element) => value + element);\n\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"110"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"110"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"110"},{"kind":"method","name":"fold","id":"fold2()","comment":"\nReduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.\n\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of an iterable:\n\n    iterable.fold(0, (prev, element) => prev + element);\n\n","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/core/iterable.dart","line":"126"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"126"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"126"}],"line":"125"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","comment":"\nReturns true if every elements of this collection satisify the\npredicate [test]. Returns `false` otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"132"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"132"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","comment":"\nConverts each element to a [String] and concatenates the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"141"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","comment":"\nReturns true if one element of this collection satisfies the\npredicate [test]. Returns false otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"151"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"151"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toList","id":"toList1()","comment":"\nCreates a [List] containing the elements of this [Iterable].\n\nThe elements are in iteration order. The list is fixed-length\nif [growable] is false.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"159"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toSet","id":"toSet0()","comment":"\nCreates a [Set] containing the elements of this [Iterable].\n","line":"164"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"take","id":"take1()","comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if `this`\ncontains fewer than [n] elements.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"192"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","comment":"\nReturns an Iterable that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable starts iterating over the elements of `this`.\n\nWhen the iterator encounters an element `e` that does not satisfy [test],\nit discards `e` and moves into the finished state. That is, it does not\nget or provide any more elements.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"204"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"204"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skip","id":"skip1()","comment":"\nReturns an Iterable that skips the first [n] elements.\n\nIf `this` has fewer than [n] elements, then the resulting Iterable is\nempty.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"214"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","comment":"\nReturns an Iterable that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable iterates over all elements of `this`.\n\nAs long as the iterator's elements satisfy [test] they are\ndiscarded. Once an element does not satisfy the [test] the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned Iterable are the elements of `this` starting from the\nfirst element that does not satisfy [test].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"228"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"228"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"firstWhere","id":"firstWhere2()","comment":"\nReturns the first element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"259"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"259"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"lastWhere","id":"lastWhere2()","comment":"\nReturns the last element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"268"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"268"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","comment":"\nReturns the single element that satisfies [test]. If no or more than one\nelement match then a [StateError] is thrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"274"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"274"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"elementAt","id":"elementAt1()","comment":"\nReturns the [index]th element.\n\nIf `this` has fewer than [index] elements throws a [RangeError].\n\nNote: if `this` does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"285"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"property","name":"iterator","id":"iterator","comment":"\nReturns an Iterator that iterates over this Iterable object.\n","line":"54"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","line":"172"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns true if there is no element in this collection.\n","line":"177"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","comment":"\nReturns true if there is at least one element in this collection.\n","line":"182"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"first","id":"first","comment":"\nReturns the first element.\n\nIf `this` is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","line":"236"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"last","id":"last","comment":"\nReturns the last element.\n\nIf `this` is empty throws a [StateError].\n","line":"243"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"single","id":"single","comment":"\nReturns the single element in `this`.\n\nIf `this` is empty or has more than one element throws a [StateError].\n","line":"250"},{"kind":"constructor","name":"","id":"0()","line":"35"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"constructor","name":"generate","id":"generate2()","comment":"\nCreates an Iterable that generates its elements dynamically.\n\nThe Iterators created by the Iterable count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an Iterable, [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"generator","id":"generator","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index","uri":"dart-sdk/lib/core/iterable.dart","line":"47"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"47"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/iterable.dart","line":"34"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"isThrowable":true,"kind":"class","name":"Exception","id":"Exception","comment":"\nA marker interface implemented by all core library exceptions.\n\nAn [Exception] is intended to convey information to the user about a failure,\nso that the error can be addressed programmatically. It is intended to be\ncaught, and it should contain useful data fields.\n\nCreating instances of [Exception] directly with [:new Exception(\"message\"):]\nis discouraged, and only included as a temporary measure during development,\nuntil the actual exceptions used by a library are done.\n","children":[{"returnType":{"name":"Exception","refId":"dart.core/Exception"},"kind":"constructor","name":"","id":"1()","children":[{"isOptional":true,"kind":"param","name":"message","id":"message"}],"line":"21"}],"uri":"dart-sdk/lib/core/exceptions.dart","line":"20"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"kind":"class","name":"Error","id":"Error","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"safeToString","id":"safeToString1()","comment":"\nSafely convert a value to a [String] description.\n\nThe conversion is guaranteed to not throw, so it won't use the object's\ntoString method.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"line":"14"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_objectToString","id":"_objectToString1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"isPrivate":true,"line":"65"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"kind":"property","name":"stackTrace","id":"stackTrace","line":"67"}],"uri":"dart-sdk/lib/core/errors.dart","line":"7"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","name":"dart:async","id":"dart.async","comment":"\nSupport for asynchronous programming,\nwith classes such as Future and Stream.\n\nFor an introduction to asynchronous programming in Dart, see the\n[dart:async section of the language tour]\n(https://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-asynchronous-programming).\n\n## Other resources\n\n* [Using Future Based APIs]\n(https://www.dartlang.org/articles/using-future-based-apis/): A first look at\nFutures and how to use them to write asynchronous Dart code.\n\n* [Futures and Error Handling]\n(https://www.dartlang.org/articles/futures-and-error-handling/): Everything\nyou wanted to know about handling errors and exceptions when working with\nFutures (but were afraid to ask).\n\n* [The Event Loop and Dart](https://www.dartlang.org/articles/event-loop/):\nLearn how Dart handles the event queue and microtask queue, so you can write\nbetter asynchronous code with fewer surprises.\n\n* [Asynchronous Unit Testing with Dart]\n(https://www.dartlang.org/articles/dart-unit-tests/#asynchronous-tests): How\nto test asynchronous code.\n","children":[{"superclass":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/StreamView/T"}]},"kind":"class","name":"StreamView","id":"StreamView","comment":"[Stream] wrapper that only exposes the [Stream] interface. ","children":[{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/StreamView/T"}]},"kind":"method","name":"asBroadcastStream","id":"asBroadcastStream2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onListen","id":"onListen","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription"},"kind":"param","name":"subscription","id":"subscription","uri":"dart-sdk/lib/async/stream.dart","line":"1011"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onCancel","id":"onCancel","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription"},"kind":"param","name":"subscription","id":"subscription","uri":"dart-sdk/lib/async/stream.dart","line":"1012"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"1012"}],"line":"1011"},{"returnType":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription","arguments":[{"name":"T","refId":"dart.async/StreamView/T"}]},"kind":"method","name":"listen","id":"listen4()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"onData","id":"onData","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/StreamView/T"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/async/stream.dart","line":"1015"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onError","id":"onError","line":"1016"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onDone","id":"onDone","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"1017"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"cancelOnError","id":"cancelOnError","line":"1018"}],"line":"1015"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isBroadcast","id":"isBroadcast","line":"1009"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/StreamView/T"}]},"kind":"variable","name":"_stream","id":"_stream","isPrivate":true,"line":"1005"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/StreamView/T"}]},"initializedField":{"name":"_stream","refId":"dart.async/StreamView/_stream"},"kind":"param","name":"_stream","id":"_stream","isPrivate":true}],"line":"1007"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/async/stream.dart","line":"1004"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Stream","id":"Stream","comment":"\nA source of asynchronous data events.\n\nA Stream provides a sequence of events. Each event is either a data event or\nan error event, representing the result of a single computation. When the\nStream is exhausted, it may send a single \"done\" event.\n\nYou can [listen] on a stream to receive the events it sends. When you listen,\nyou receive a [StreamSubscription] object that can be used to stop listening,\nor to temporarily pause events from the stream.\n\nWhen an event is fired, the listeners at that time are informed.\nIf a listener is added while an event is being fired, the change\nwill only take effect after the event is completely fired. If a listener\nis canceled, it immediately stops receiving events.\n\nWhen the \"done\" event is fired, subscribers are unsubscribed before\nreceiving the event. After the event has been sent, the stream has no\nsubscribers. Adding new subscribers after this point is allowed, but\nthey will just receive a new \"done\" event as soon as possible.\n\nStreams always respect \"pause\" requests. If necessary they need to buffer\ntheir input, but often, and preferably, they can simply request their input\nto pause too.\n\nThere are two kinds of streams: The normal \"single-subscription\" streams and\n\"broadcast\" streams.\n\nA single-subscription stream allows only a single listener at a time.\nIt holds back events until it gets a listener, and it may exhaust\nitself when the listener is unsubscribed, even if the stream wasn't done.\n\nSingle-subscription streams are generally used for streaming parts of\ncontiguous data like file I/O.\n\nA broadcast stream allows any number of listeners, and it fires\nits events when they are ready, whether there are listeners or not.\n\nBroadcast streams are used for independent events/observers.\n\nThe default implementation of [isBroadcast] returns false.\nA broadcast stream inheriting from [Stream] must override [isBroadcast]\nto return [:true:].\n","children":[{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"asBroadcastStream","id":"asBroadcastStream2()","comment":"\nReturns a multi-subscription stream that produces the same events as this.\n\nIf this stream is already a broadcast stream, it is returned unmodified.\n\nIf this stream is single-subscription, return a new stream that allows\nmultiple subscribers. It will subscribe to this stream when its first\nsubscriber is added, and will stay subscribed until this stream ends,\nor a callback cancels the subscription.\n\nIf [onListen] is provided, it is called with a subscription-like object\nthat represents the underlying subscription to this stream. It is\npossible to pause, resume or cancel the subscription during the call\nto [onListen]. It is not possible to change the event handlers, including\nusing [StreamSubscription.asFuture].\n\nIf [onCancel] is provided, it is called in a similar way to [onListen]\nwhen the returned stream stops having listener. If it later gets\na new listener, the [onListen] function is called again.\n\nUse the callbacks, for example, for pausing the underlying subscription\nwhile having no subscribers to prevent losing events, or canceling the\nsubscription when there are no listeners.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onListen","id":"onListen","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"subscription","id":"subscription","uri":"dart-sdk/lib/async/stream.dart","line":"222"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"222"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onCancel","id":"onCancel","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"subscription","id":"subscription","uri":"dart-sdk/lib/async/stream.dart","line":"223"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"223"}],"line":"221"},{"returnType":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"listen","id":"listen4()","comment":"\nAdds a subscription to this stream.\n\nOn each data event from this stream, the subscriber's [onData] handler\nis called. If [onData] is null, nothing happens.\n\nOn errors from this stream, the [onError] handler is given a\nobject describing the error.\n\nThe [onError] callback must be of type `void onError(error)` or\n`void onError(error, StackTrace stackTrace)`. If [onError] accepts\ntwo arguments it is called with the stack trace (which could be `null` if\nthe stream itself received an error without stack trace).\nOtherwise it is called with just the error object.\n\nIf this stream closes, the [onDone] handler is called.\n\nIf [cancelOnError] is true, the subscription is ended when\nthe first error is reported. The default is false.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"onData","id":"onData","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"event","id":"event","uri":"dart-sdk/lib/async/stream.dart","line":"248"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onError","id":"onError","line":"249"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onDone","id":"onDone","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"250"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"cancelOnError","id":"cancelOnError","line":"251"}],"line":"248"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"where","id":"where1()","comment":"\nCreates a new stream from this stream that discards some data events.\n\nThe new stream sends the same error and done events as this stream,\nbut it only sends the data events that satisfy the [test].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"event","id":"event","uri":"dart-sdk/lib/async/stream.dart","line":"259"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"259"},{"returnType":{"name":"Stream","refId":"dart.async/Stream"},"kind":"method","name":"map","id":"map1()","comment":"\nCreates a new stream that converts each element of this stream\nto a new value using the [convert] function.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"convert","id":"convert","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"event","id":"event","uri":"dart-sdk/lib/async/stream.dart","line":"267"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"267"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"handleError","id":"handleError2()","comment":"\nCreates a wrapper Stream that intercepts some errors from this stream.\n\nIf this stream sends an error that matches [test], then it is intercepted\nby the [handle] function.\n\nThe [onError] callback must be of type `void onError(error)` or\n`void onError(error, StackTrace stackTrace)`. Depending on the function\ntype the the stream either invokes [onError] with or without a stack\ntrace. The stack trace argument might be `null` if the stream itself\nreceived an error without stack trace.\n\nAn [AsyncError] [:e:] is matched by a test function if [:test(e):] returns\ntrue. If [test] is omitted, every error is considered matching.\n\nIf the error is intercepted, the [handle] function can decide what to do\nwith it. It can throw if it wants to raise a new (or the same) error,\nor simply return to make the stream forget the error.\n\nIf you need to transform an error into a data event, use the more generic\n[Stream.transform] to handle the event by writing a data event to\nthe output sink\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"onError","id":"onError"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"error","id":"error","uri":"dart-sdk/lib/async/stream.dart","line":"294"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"294"},{"returnType":{"name":"Stream","refId":"dart.async/Stream"},"kind":"method","name":"expand","id":"expand1()","comment":"\nCreates a new stream from this stream that converts each element\ninto zero or more events.\n\nEach incoming event is converted to an [Iterable] of new events,\nand each of these new events are then sent by the returned stream\nin order.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"convert","id":"convert","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/async/stream.dart","line":"306"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"306"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"pipe","id":"pipe1()","comment":"\nBinds this stream as the input of the provided [StreamConsumer].\n","children":[{"ref":{"name":"StreamConsumer","refId":"dart.async/StreamConsumer","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"streamConsumer","id":"streamConsumer"}],"line":"313"},{"returnType":{"name":"Stream","refId":"dart.async/Stream"},"kind":"method","name":"transform","id":"transform1()","comment":"\nChains this stream as the input of the provided [StreamTransformer].\n\nReturns the result of [:streamTransformer.bind:] itself.\n","children":[{"ref":{"name":"StreamTransformer","refId":"dart.async/StreamTransformer","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"streamTransformer","id":"streamTransformer"}],"line":"322"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"reduce","id":"reduce1()","comment":"\nReduces a sequence of values by repeatedly applying [combine].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"T","refId":"dart.async/Stream/T"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"previous","id":"previous","uri":"dart-sdk/lib/async/stream.dart","line":"329"},{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"329"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"329"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"fold","id":"fold2()","comment":"Reduces a sequence of values by repeatedly applying [combine]. ","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previous","id":"previous","uri":"dart-sdk/lib/async/stream.dart","line":"359"},{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"359"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"359"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"join","id":"join1()","comment":"\nCollects string of data events' string representations.\n\nIf [separator] is provided, it is inserted between any two\nelements.\n\nAny error in the stream causes the future to complete with that\nerror. Otherwise it completes with the collected string when\nthe \"done\" event arrives.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"391"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"method","name":"contains","id":"contains1()","comment":"\nChecks whether [needle] occurs in the elements provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"needle","id":"needle"}],"line":"424"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\nExecutes [action] on each data event of the stream.\n\nCompletes the returned [Future] when all events of the stream\nhave been processed. Completes the future with an error if the\nstream has an error event, or if [action] throws.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"action","id":"action","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"454"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"454"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"method","name":"every","id":"every1()","comment":"\nChecks whether [test] accepts all elements provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"479"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"479"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"method","name":"any","id":"any1()","comment":"\nChecks whether [test] accepts any element provided by this stream.\n\nCompletes the [Future] when the answer is known.\nIf this stream reports an error, the [Future] will report that error.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"508"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"508"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]}]},"kind":"method","name":"toList","id":"toList0()","comment":"Collects the data of this stream in a [List]. ","line":"563"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]}]},"kind":"method","name":"toSet","id":"toSet0()","comment":"Collects the data of this stream in a [Set]. ","line":"579"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"drain","id":"drain1()","comment":"\nDiscards all data on the stream, but signals when it's done or an error\noccured.\n\nWhen subscribing using [drain], cancelOnError will be true. This means\nthat the future will complete with the first error on the stream and then\ncancel the subscription.\n\nIn case of a `done` event the future completes with the given\n[futureValue].\n","children":[{"isOptional":true,"kind":"param","name":"futureValue","id":"futureValue"}],"line":"605"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"take","id":"take1()","comment":"\nProvides at most the first [n] values of this stream.\n\nForwards the first [n] data events of this stream, and all error\nevents, to the returned stream, and ends with a done event.\n\nIf this stream produces fewer than [count] values before it's done,\nso will the returned stream.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"617"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","comment":"\nForwards data events while [test] is successful.\n\nThe returned stream provides the same events as this stream as long\nas [test] returns [:true:] for the event data. The stream is done\nwhen either this stream is done, or when this stream first provides\na value that [test] doesn't accept.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"629"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"629"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"skip","id":"skip1()","comment":"\nSkips the first [count] data events from this stream.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"636"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","comment":"\nSkip data events from this stream while they are matched by [test].\n\nError and done events are provided by the returned stream unmodified.\n\nStarting with the first data event where [test] returns false for the\nevent data, the returned stream will have the same events as this stream.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"648"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"648"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"distinct","id":"distinct1()","comment":"\nSkips data events if they are equal to the previous data event.\n\nThe returned stream provides the same events as this stream, except\nthat it never provides two consequtive data events that are equal.\n\nEquality is determined by the provided [equals] method. If that is\nomitted, the '==' operator on the last provided data element is used.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"equals","id":"equals","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"previous","id":"previous","uri":"dart-sdk/lib/async/stream.dart","line":"661"},{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"next","id":"next","uri":"dart-sdk/lib/async/stream.dart","line":"661"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"661"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[]},"kind":"method","name":"firstWhere","id":"firstWhere2()","comment":"\nFinds the first element of this stream matching [test].\n\nReturns a future that is filled with the first element of this stream\nthat [test] returns true for.\n\nIf no such element is found before this stream is done, and a\n[defaultValue] function is provided, the result of calling [defaultValue]\nbecomes the value of the future.\n\nIf an error occurs, or if this stream ends without finding a match and\nwith no [defaultValue] function provided, the future will receive an\nerror.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"772"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"defaultValue","id":"defaultValue","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"772"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[]},"kind":"method","name":"lastWhere","id":"lastWhere2()","comment":"\nFinds the last element in this stream matching [test].\n\nAs [firstWhere], except that the last matching element is found.\nThat means that the result cannot be provided before this stream\nis done.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"806"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"defaultValue","id":"defaultValue","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"806"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"singleWhere","id":"singleWhere1()","comment":"\nFinds the single element in this stream matching [test].\n\nLike [lastMatch], except that it is an error if more than one\nmatching element occurs in the stream.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"T","refId":"dart.async/Stream/T"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/async/stream.dart","line":"846"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"846"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"method","name":"elementAt","id":"elementAt1()","comment":"\nReturns the value of the [index]th data event of this stream.\n\nStops listening to the stream after a value has been found.\n\nIf an error event occurs before the value is found, the future completes\nwith this error.\n\nIf a done event occurs before the value is found, the future completes\nwith a [RangeError].\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"895"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isBroadcast","id":"isBroadcast","comment":"\nReports whether this stream is a broadcast stream.\n","line":"195"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"property","name":"length","id":"length","comment":"Counts the elements in the stream. ","line":"533"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"bool","refId":"dart.core/bool"}]},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"Reports whether this stream contains any elements. ","line":"547"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"property","name":"first","id":"first","comment":"\nReturns the first element of the stream.\n\nStops listening to the stream after the first element has been received.\n\nIf an error event occurs before the first data event, the resulting future\nis completed with that error.\n\nIf this stream is empty (a done event occurs before the first data event),\nthe resulting future completes with a [StateError].\n\nExcept for the type of the error, this method is equivalent to\n[:this.elementAt(0):].\n","line":"679"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"property","name":"last","id":"last","comment":"\nReturns the last element of the stream.\n\nIf an error event occurs before the first data event, the resulting future\nis completed with that error.\n\nIf this stream is empty (a done event occurs before the first data event),\nthe resulting future completes with a [StateError].\n","line":"703"},{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"property","name":"single","id":"single","comment":"\nReturns the single element.\n\nIf [this] is empty or has more than one element throws a [StateError].\n","line":"730"},{"kind":"constructor","name":"","id":"0()","line":"56"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"constructor","name":"fromFuture","id":"fromFuture1()","comment":"\nCreates a new single-subscription stream from the future.\n\nWhen the future completes, the stream will fire one event, either\ndata or error, and then close with a done-event.\n","children":[{"ref":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"future","id":"future"}],"line":"64"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"constructor","name":"fromIterable","id":"fromIterable1()","comment":"\nCreates a single-subscription stream that gets its data from [data].\n\nIf iterating [data] throws an error, the stream ends immediately with\nthat error. No done event will be sent (iteration is not complete), but no\nfurther data events will be generated either, since iteration cannot\ncontinue.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"data","id":"data"}],"line":"85"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"constructor","name":"periodic","id":"periodic2()","comment":"\nCreates a stream that repeatedly emits events at [period] intervals.\n\nThe event values are computed by invoking [computation]. The argument to\nthis callback is an integer that starts with 0 and is incremented for\nevery event.\n\nIf [computation] is omitted the event values will all be `null`.\n","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"param","name":"period","id":"period"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"computation","id":"computation","children":[{"returnType":{"name":"T","refId":"dart.async/Stream/T"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"computationCount","id":"computationCount","uri":"dart-sdk/lib/async/stream.dart","line":"100"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"100"}],"line":"99"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"constructor","name":"eventTransformed","id":"eventTransformed2()","comment":"\nCreates a stream where all events of an existing stream are piped through\na sink-transformation.\n\nThe given [mapSink] closure is invoked when the returned stream is\nlistened to. All events from the [source] are added into the event sink\nthat is returned from the invocation. The transformation puts all\ntransformed events into the sink the [mapSink] closure received during\nits invocation. Conceptually the [mapSink] creates a transformation pipe\nwith the input sink being the returned [EventSink] and the output sink\nbeing the sink it received.\n\nThis constructor is frequently used to build transformers.\n\nExample use for a duplicating transformer:\n\n    class DuplicationSink implements EventSink<String> {\n      final EventSink<String> _outputSink;\n      DuplicationSink(this._outputSink);\n\n      void add(String data) {\n        _outputSink.add(data);\n        _outputSink.add(data);\n      }\n\n      void addError(e, [st]) => _outputSink(e, st);\n      void close() => _outputSink.close();\n    }\n\n    class DuplicationTransformer implements StreamTransformer<String, String> {\n      // Some generic types ommitted for brevety.\n      Stream bind(Stream stream) => new Stream<String>.eventTransform(\n          stream,\n          (EventSink sink) => new DuplicationSink(sink));\n    }\n\n    stringStream.transform(new DuplicationTransformer());\n","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"mapSink","id":"mapSink","children":[{"returnType":{"name":"EventSink","refId":"dart.async/EventSink"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.async/Stream/T"}]},"kind":"param","name":"sink","id":"sink","uri":"dart-sdk/lib/async/stream.dart","line":"188"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"188"}],"line":"187"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/async/stream.dart","line":"55"}],"uri":"dart-sdk/lib/async/async.dart","line":"32"},{"kind":"library","name":"dart:collection","id":"dart.collection","comment":"\nClasses and utilities that supplement the collection support in dart:core.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]}],"kind":"class","name":"ListMixin","id":"ListMixin","comment":"\nBase implementation of a [List] class.\n\nThis class can be used as a mixin.\n\nThis implements all read operations using only the `length` and\n`operator[]` members. It implements write operations using those and\n`length=` and `operator[]=`\n","children":[{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"elementAt","id":"elementAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"32"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"action","id":"action","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"34"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"34"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"64"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"75"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"75"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"86"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"86"},{"kind":"method","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"97"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"97"},{"kind":"method","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"110"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"110"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"123"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"123"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"144"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"where","id":"where1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"173"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"173"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"175"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"175"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"177"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"177"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"reduce","id":"reduce1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/list.dart","line":"180"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"180"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"180"},{"kind":"method","name":"fold","id":"fold2()","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/list.dart","line":"189"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"189"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"189"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"201"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"203"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"203"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"take","id":"take1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"207"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"209"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"209"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"213"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"226"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element"}],"line":"235"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"239"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"245"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"256"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"256"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"260"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"260"},{"returnType":{"name":"void","refId":"void"},"isStatic":true,"kind":"method","name":"_filter","id":"_filter3()","children":[{"ref":{"name":"List","refId":"dart.core/List"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"265"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"265"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"retainMatching","id":"retainMatching","line":"266"}],"isPrivate":true,"line":"264"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","line":"284"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"removeLast","id":"removeLast0()","line":"288"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"sort","id":"sort1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"a","id":"a","uri":"dart-sdk/lib/collection/list.dart","line":"297"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"b","id":"b","uri":"dart-sdk/lib/collection/list.dart","line":"297"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"297"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"shuffle","id":"shuffle1()","children":[{"ref":{"name":"Random","refId":"dart.math/Random"},"isOptional":true,"kind":"param","name":"random","id":"random"}],"line":"305"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"int","refId":"dart.core/int"},{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"asMap","id":"asMap0()","line":"317"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_rangeCheck","id":"_rangeCheck2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"isPrivate":true,"line":"321"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"sublist","id":"sublist2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"end","id":"end"}],"line":"330"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"getRange","id":"getRange2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"341"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeRange","id":"removeRange2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"346"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fillRange","id":"fillRange3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"isOptional":true,"kind":"param","name":"fill","id":"fill"}],"line":"353"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setRange","id":"setRange4()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"skipCount","id":"skipCount"}],"line":"360"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"replaceRange","id":"replaceRange3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"newContents","id":"newContents"}],"line":"392"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"indexOf","id":"indexOf2()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"startIndex","id":"startIndex"}],"line":"418"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"lastIndexOf","id":"lastIndexOf2()","comment":"\nReturns the last index in the list [a] of the given [element], starting\nthe search at index [startIndex] to 0.\nReturns -1 if [element] is not found.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"startIndex","id":"startIndex"}],"line":"438"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insert","id":"insert2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element"}],"line":"457"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"removeAt","id":"removeAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"474"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insertAll","id":"insertAll2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"481"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAll","id":"setAll2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"497"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"509"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"property","name":"iterator","id":"iterator","line":"30"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"44"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"46"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"first","id":"first","line":"48"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"last","id":"last","line":"53"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"single","id":"single","line":"58"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"property","name":"reversed","id":"reversed","line":"507"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/list.dart","line":"27"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"ListMixin","refId":"dart.collection/ListMixin","arguments":[{"name":"E","refId":"dart.collection/ListBase/E"}]}],"kind":"class","name":"ListBase","id":"ListBase","children":[{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"elementAt","id":"elementAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"32"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"action","id":"action","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"34"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"34"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"64"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"75"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"75"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"86"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"86"},{"kind":"method","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"97"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"97"},{"kind":"method","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"110"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"110"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"123"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"123"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"144"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"where","id":"where1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"173"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"173"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"175"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"175"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"177"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"177"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"reduce","id":"reduce1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/list.dart","line":"180"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"180"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"180"},{"kind":"method","name":"fold","id":"fold2()","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/list.dart","line":"189"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"189"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"189"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"201"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"203"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"203"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"take","id":"take1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"207"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"209"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"209"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"213"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"226"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element"}],"line":"235"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"239"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"245"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"256"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"256"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"260"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"260"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","line":"284"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"removeLast","id":"removeLast0()","line":"288"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"sort","id":"sort1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"a","id":"a","uri":"dart-sdk/lib/collection/list.dart","line":"297"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"b","id":"b","uri":"dart-sdk/lib/collection/list.dart","line":"297"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"297"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"shuffle","id":"shuffle1()","children":[{"ref":{"name":"Random","refId":"dart.math/Random"},"isOptional":true,"kind":"param","name":"random","id":"random"}],"line":"305"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"int","refId":"dart.core/int"},{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"asMap","id":"asMap0()","line":"317"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_rangeCheck","id":"_rangeCheck2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"isPrivate":true,"line":"321"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"sublist","id":"sublist2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"end","id":"end"}],"line":"330"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"getRange","id":"getRange2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"341"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeRange","id":"removeRange2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"346"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fillRange","id":"fillRange3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"isOptional":true,"kind":"param","name":"fill","id":"fill"}],"line":"353"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setRange","id":"setRange4()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"skipCount","id":"skipCount"}],"line":"360"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"replaceRange","id":"replaceRange3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"newContents","id":"newContents"}],"line":"392"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"indexOf","id":"indexOf2()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"startIndex","id":"startIndex"}],"line":"418"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"lastIndexOf","id":"lastIndexOf2()","comment":"\nReturns the last index in the list [a] of the given [element], starting\nthe search at index [startIndex] to 0.\nReturns -1 if [element] is not found.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"startIndex","id":"startIndex"}],"line":"438"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insert","id":"insert2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element"}],"line":"457"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"removeAt","id":"removeAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"474"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insertAll","id":"insertAll2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"481"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAll","id":"setAll2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"497"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"509"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"property","name":"iterator","id":"iterator","line":"30"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"44"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"46"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"first","id":"first","line":"48"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"last","id":"last","line":"53"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"single","id":"single","line":"58"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"property","name":"reversed","id":"reversed","line":"507"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/list.dart","line":"16"}],"uri":"dart-sdk/lib/collection/collection.dart","line":"8"},{"kind":"library","name":"dart:_collection-dev","id":"dart._collection.dev","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"EfficientLength","id":"EfficientLength","comment":"\nMarker interface for [Iterable] subclasses that have an efficient\n[length] implementation.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of elements in the iterable.\n\nThis is an efficient operation that doesn't require iterating through\nthe elements.\n","line":"18"}],"uri":"dart-sdk/lib/_collection_dev/iterable.dart","line":"11"}],"uri":"dart-sdk/lib/_collection_dev/collection_dev.dart","line":"5"}],"kind":"library","id":"sqljocky","children":[{"kind":"variable","name":"_NO_RESULT","id":"_NO_RESULT","isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/handlers/handler.dart","line":"6"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Field","refId":"results/Field"}],"kind":"class","name":"_FieldImpl","id":"_FieldImpl","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"51"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"catalog","id":"catalog","line":"17"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"db","id":"db","line":"18"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"table","id":"table","line":"19"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"orgTable","id":"orgTable","line":"20"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"name","id":"name","line":"21"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"orgName","id":"orgName","line":"22"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"characterSet","id":"characterSet","line":"23"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"24"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"type","id":"type","line":"25"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"flags","id":"flags","line":"26"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"decimals","id":"decimals","line":"27"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"defaultValue","id":"defaultValue","line":"28"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_catalog","id":"_catalog","isPrivate":true,"line":"4"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_db","id":"_db","isPrivate":true,"line":"5"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_table","id":"_table","isPrivate":true,"line":"6"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_orgTable","id":"_orgTable","isPrivate":true,"line":"7"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_name","id":"_name","isPrivate":true,"line":"8"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_orgName","id":"_orgName","isPrivate":true,"line":"9"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_characterSet","id":"_characterSet","isPrivate":true,"line":"10"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_length","id":"_length","isPrivate":true,"line":"11"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_type","id":"_type","isPrivate":true,"line":"12"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_flags","id":"_flags","isPrivate":true,"line":"13"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_decimals","id":"_decimals","isPrivate":true,"line":"14"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_defaultValue","id":"_defaultValue","isPrivate":true,"line":"15"},{"kind":"constructor","name":"_forTests","id":"_forTests1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"_type","refId":"sqljocky/_FieldImpl/_type"},"kind":"param","name":"_type","id":"_type","isPrivate":true}],"isPrivate":true,"line":"30"},{"kind":"constructor","name":"_","id":"_1()","children":[{"ref":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"param","name":"buffer","id":"buffer"}],"isPrivate":true,"line":"32"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/results/field_impl.dart","line":"3"},{"superclass":{"name":"StreamView","refId":"dart.async/StreamView","arguments":[{"name":"Row","refId":"results/Row"}]},"interfaces":[{"name":"Results","refId":"results/Results"}],"kind":"class","name":"_ResultsImpl","id":"_ResultsImpl","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Field","refId":"results/Field"}]},"kind":"property","name":"fields","id":"fields","line":"8"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"insertId","id":"insertId","line":"4"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"affectedRows","id":"affectedRows","line":"5"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Field","refId":"results/Field"}]},"kind":"variable","name":"_fields","id":"_fields","isPrivate":true,"line":"6"},{"returnType":{"name":"_ResultsImpl","refId":"sqljocky/_ResultsImpl"},"kind":"constructor","name":"","id":"4()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"insertId","id":"insertId"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"affectedRows","id":"affectedRows"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Field","refId":"results/Field"}]},"kind":"param","name":"fields","id":"fields","line":"11"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"Row","refId":"results/Row"}]},"defaultValue":"null","isOptional":true,"isNamed":true,"kind":"param","name":"stream","id":"stream","line":"12"}],"line":"10"},{"kind":"constructor","name":"_fromStream","id":"_fromStream4()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"insertId","refId":"sqljocky/_ResultsImpl/insertId"},"kind":"param","name":"insertId","id":"insertId"},{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"affectedRows","refId":"sqljocky/_ResultsImpl/affectedRows"},"kind":"param","name":"affectedRows","id":"affectedRows"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Field","refId":"results/Field"}]},"kind":"param","name":"fields","id":"fields"},{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"Row","refId":"results/Row"}]},"kind":"param","name":"stream","id":"stream","line":"25"}],"isPrivate":true,"line":"24"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/results/results_impl.dart","line":"3"},{"superclass":{"name":"_Handler","refId":"sqljocky/_Handler"},"kind":"class","name":"_QueryStreamHandler","id":"_QueryStreamHandler","children":[{"returnType":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"method","name":"createRequest","id":"createRequest0()","line":"22"},{"returnType":{"name":"_HandlerResponse","refId":"sqljocky/_HandlerResponse"},"kind":"method","name":"processResponse","id":"processResponse1()","children":[{"ref":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"param","name":"response","id":"response"}],"line":"30"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"STATE_HEADER_PACKET","id":"STATE_HEADER_PACKET","line":"4"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"STATE_FIELD_PACKETS","id":"STATE_FIELD_PACKETS","line":"5"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"STATE_ROW_PACKETS","id":"STATE_ROW_PACKETS","line":"6"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_sql","id":"_sql","isPrivate":true,"line":"7"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_state","id":"_state","isPrivate":true,"line":"8"},{"ref":{"name":"_OkPacket","refId":"sqljocky/_OkPacket"},"kind":"variable","name":"_okPacket","id":"_okPacket","isPrivate":true,"line":"10"},{"ref":{"name":"_ResultSetHeaderPacket","refId":"sqljocky/_ResultSetHeaderPacket"},"kind":"variable","name":"_resultSetHeaderPacket","id":"_resultSetHeaderPacket","isPrivate":true,"line":"11"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"_FieldImpl","refId":"sqljocky/_FieldImpl"}]},"kind":"variable","name":"_fieldPackets","id":"_fieldPackets","isPrivate":true,"line":"12"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"Symbol","refId":"dart.core/Symbol"},{"name":"int","refId":"dart.core/int"}]},"kind":"variable","name":"_fieldIndex","id":"_fieldIndex","isPrivate":true,"line":"13"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[{"name":"Row","refId":"results/Row"}]},"kind":"variable","name":"_streamController","id":"_streamController","isPrivate":true,"line":"15"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_sql","refId":"sqljocky/_QueryStreamHandler/_sql"},"kind":"param","name":"_sql","id":"_sql","isPrivate":true}],"line":"17"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/query/query_stream_handler.dart","line":"3"},{"superclass":{"name":"Row","refId":"results/Row"},"kind":"class","name":"_StandardDataPacket","id":"_StandardDataPacket","children":[{"isOperator":true,"kind":"method","name":"[]","id":"[]1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"73"},{"returnType":{"name":"void","refId":"void"},"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"kind":"param","name":"value","id":"value"}],"line":"75"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"length=","id":"length=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"newLength","id":"newLength"}],"line":"79"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"83"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"94"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"71"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[]},"isFinal":true,"kind":"variable","name":"values","id":"values","line":"4"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"Symbol","refId":"dart.core/Symbol"},{"name":"int","refId":"dart.core/int"}]},"isFinal":true,"kind":"variable","name":"_fieldIndex","id":"_fieldIndex","isPrivate":true,"line":"5"},{"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"param","name":"buffer","id":"buffer"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"_FieldImpl","refId":"sqljocky/_FieldImpl"}]},"kind":"param","name":"fieldPackets","id":"fieldPackets"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"Symbol","refId":"dart.core/Symbol"},{"name":"int","refId":"dart.core/int"}]},"initializedField":{"name":"_fieldIndex","refId":"sqljocky/_StandardDataPacket/_fieldIndex"},"kind":"param","name":"_fieldIndex","id":"_fieldIndex","isPrivate":true}],"line":"7"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/query/standard_data_packet.dart","line":"3"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_ResultSetHeaderPacket","id":"_ResultSetHeaderPacket","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"18"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"fieldCount","id":"fieldCount","line":"8"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_fieldCount","id":"_fieldCount","isPrivate":true,"line":"4"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_extra","id":"_extra","isPrivate":true,"line":"5"},{"ref":{"name":"Logger","refId":"logging/Logger"},"kind":"variable","name":"log","id":"log","line":"6"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"param","name":"buffer","id":"buffer"}],"line":"10"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/query/result_set_header_packet.dart","line":"3"},{"superclass":{"name":"Row","refId":"results/Row"},"kind":"class","name":"_BinaryDataPacket","id":"_BinaryDataPacket","children":[{"kind":"method","name":"_readField","id":"_readField2()","children":[{"ref":{"name":"_FieldImpl","refId":"sqljocky/_FieldImpl"},"kind":"param","name":"field","id":"field"},{"ref":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"param","name":"buffer","id":"buffer"}],"isPrivate":true,"line":"40"},{"isOperator":true,"kind":"method","name":"[]","id":"[]1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"205"},{"returnType":{"name":"void","refId":"void"},"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"kind":"param","name":"value","id":"value"}],"line":"207"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"length=","id":"length=1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"newLength","id":"newLength"}],"line":"211"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"215"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"203"},{"ref":{"name":"List","refId":"dart.core/List"},"kind":"variable","name":"values","id":"values","line":"4"},{"ref":{"name":"Logger","refId":"logging/Logger"},"isFinal":true,"kind":"variable","name":"log","id":"log","line":"5"},{"kind":"constructor","name":"_forTests","id":"_forTests0()","isPrivate":true,"line":"7"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"param","name":"buffer","id":"buffer"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"_FieldImpl","refId":"sqljocky/_FieldImpl"}]},"kind":"param","name":"fields","id":"fields"}],"line":"9"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/prepared_statements/binary_data_packet.dart","line":"3"},{"superclass":{"name":"_Handler","refId":"sqljocky/_Handler"},"kind":"class","name":"_ExecuteQueryHandler","id":"_ExecuteQueryHandler","children":[{"returnType":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"method","name":"createRequest","id":"createRequest0()","line":"25"},{"returnType":{"name":"_HandlerResponse","refId":"sqljocky/_HandlerResponse"},"kind":"method","name":"processResponse","id":"processResponse1()","children":[{"ref":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"param","name":"response","id":"response"}],"line":"151"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"STATE_HEADER_PACKET","id":"STATE_HEADER_PACKET","line":"4"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"STATE_FIELD_PACKETS","id":"STATE_FIELD_PACKETS","line":"5"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"STATE_ROW_PACKETS","id":"STATE_ROW_PACKETS","line":"6"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_state","id":"_state","isPrivate":true,"line":"8"},{"ref":{"name":"_ResultSetHeaderPacket","refId":"sqljocky/_ResultSetHeaderPacket"},"kind":"variable","name":"_resultSetHeaderPacket","id":"_resultSetHeaderPacket","isPrivate":true,"line":"10"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"_FieldImpl","refId":"sqljocky/_FieldImpl"}]},"kind":"variable","name":"_fieldPackets","id":"_fieldPackets","isPrivate":true,"line":"11"},{"ref":{"name":"StreamController","refId":"dart.async/StreamController","arguments":[{"name":"Row","refId":"results/Row"}]},"kind":"variable","name":"_streamController","id":"_streamController","isPrivate":true,"line":"12"},{"ref":{"name":"_PreparedQuery","refId":"sqljocky/_PreparedQuery"},"isFinal":true,"kind":"variable","name":"_preparedQuery","id":"_preparedQuery","isPrivate":true,"line":"14"},{"ref":{"name":"List","refId":"dart.core/List"},"isFinal":true,"kind":"variable","name":"_values","id":"_values","isPrivate":true,"line":"15"},{"ref":{"name":"_OkPacket","refId":"sqljocky/_OkPacket"},"kind":"variable","name":"_okPacket","id":"_okPacket","isPrivate":true,"line":"16"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_executed","id":"_executed","isPrivate":true,"line":"17"},{"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"_PreparedQuery","refId":"sqljocky/_PreparedQuery"},"initializedField":{"name":"_preparedQuery","refId":"sqljocky/_ExecuteQueryHandler/_preparedQuery"},"kind":"param","name":"_preparedQuery","id":"_preparedQuery","isPrivate":true},{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"_executed","refId":"sqljocky/_ExecuteQueryHandler/_executed"},"kind":"param","name":"_executed","id":"_executed","isPrivate":true},{"ref":{"name":"List","refId":"dart.core/List"},"initializedField":{"name":"_values","refId":"sqljocky/_ExecuteQueryHandler/_values"},"kind":"param","name":"_values","id":"_values","isPrivate":true,"line":"20"}],"line":"19"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/prepared_statements/execute_query_handler.dart","line":"3"},{"superclass":{"name":"_Handler","refId":"sqljocky/_Handler"},"kind":"class","name":"_CloseStatementHandler","id":"_CloseStatementHandler","children":[{"returnType":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"method","name":"createRequest","id":"createRequest0()","line":"10"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"_handle","id":"_handle","isPrivate":true,"line":"4"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"_handle","refId":"sqljocky/_CloseStatementHandler/_handle"},"kind":"param","name":"_handle","id":"_handle","isPrivate":true}],"line":"6"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/prepared_statements/close_statement_handler.dart","line":"3"},{"superclass":{"name":"_Handler","refId":"sqljocky/_Handler"},"kind":"class","name":"_PrepareHandler","id":"_PrepareHandler","children":[{"returnType":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"method","name":"createRequest","id":"createRequest0()","line":"20"},{"returnType":{"name":"_HandlerResponse","refId":"sqljocky/_HandlerResponse"},"kind":"method","name":"processResponse","id":"processResponse1()","children":[{"ref":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"param","name":"response","id":"response"}],"line":"28"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"sql","id":"sql","line":"11"},{"ref":{"name":"_PrepareOkPacket","refId":"sqljocky/_PrepareOkPacket"},"kind":"property","name":"okPacket","id":"okPacket","line":"12"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"_FieldImpl","refId":"sqljocky/_FieldImpl"}]},"kind":"property","name":"parameters","id":"parameters","line":"13"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"_FieldImpl","refId":"sqljocky/_FieldImpl"}]},"kind":"property","name":"columns","id":"columns","line":"14"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_sql","id":"_sql","isPrivate":true,"line":"4"},{"ref":{"name":"_PrepareOkPacket","refId":"sqljocky/_PrepareOkPacket"},"kind":"variable","name":"_okPacket","id":"_okPacket","isPrivate":true,"line":"5"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_parametersToRead","id":"_parametersToRead","isPrivate":true,"line":"6"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_columnsToRead","id":"_columnsToRead","isPrivate":true,"line":"7"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"_FieldImpl","refId":"sqljocky/_FieldImpl"}]},"kind":"variable","name":"_parameters","id":"_parameters","isPrivate":true,"line":"8"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"_FieldImpl","refId":"sqljocky/_FieldImpl"}]},"kind":"variable","name":"_columns","id":"_columns","isPrivate":true,"line":"9"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_sql","refId":"sqljocky/_PrepareHandler/_sql"},"kind":"param","name":"_sql","id":"_sql","isPrivate":true}],"line":"16"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/prepared_statements/prepare_handler.dart","line":"3"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_PreparedQuery","id":"_PreparedQuery","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"sql","id":"sql","line":"4"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"_FieldImpl","refId":"sqljocky/_FieldImpl"}]},"isFinal":true,"kind":"variable","name":"parameters","id":"parameters","line":"5"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"_FieldImpl","refId":"sqljocky/_FieldImpl"}]},"isFinal":true,"kind":"variable","name":"columns","id":"columns","line":"6"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"statementHandlerId","id":"statementHandlerId","line":"7"},{"kind":"variable","name":"cnx","id":"cnx","line":"8"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"_PrepareHandler","refId":"sqljocky/_PrepareHandler"},"kind":"param","name":"handler","id":"handler"}],"line":"10"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/prepared_statements/prepared_query.dart","line":"3"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_PrepareOkPacket","id":"_PrepareOkPacket","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"23"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"statementHandlerId","id":"statementHandlerId","line":"9"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"columnCount","id":"columnCount","line":"10"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"parameterCount","id":"parameterCount","line":"11"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"warningCount","id":"warningCount","line":"12"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_statementHandlerId","id":"_statementHandlerId","isPrivate":true,"line":"4"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_columnCount","id":"_columnCount","isPrivate":true,"line":"5"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_parameterCount","id":"_parameterCount","isPrivate":true,"line":"6"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_warningCount","id":"_warningCount","isPrivate":true,"line":"7"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"param","name":"buffer","id":"buffer"}],"line":"14"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/prepared_statements/prepare_ok_packet.dart","line":"3"},{"superclass":{"name":"_Handler","refId":"sqljocky/_Handler"},"kind":"class","name":"_AuthHandler","id":"_AuthHandler","children":[{"returnType":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"method","name":"createRequest","id":"createRequest0()","line":"18"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_username","id":"_username","isPrivate":true,"line":"4"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_password","id":"_password","isPrivate":true,"line":"5"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_db","id":"_db","isPrivate":true,"line":"6"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"isFinal":true,"kind":"variable","name":"_scrambleBuffer","id":"_scrambleBuffer","isPrivate":true,"line":"7"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"_clientFlags","id":"_clientFlags","isPrivate":true,"line":"8"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"_maxPacketSize","id":"_maxPacketSize","isPrivate":true,"line":"9"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"_collation","id":"_collation","isPrivate":true,"line":"10"},{"kind":"constructor","name":"","id":"7()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_username","refId":"sqljocky/_AuthHandler/_username"},"kind":"param","name":"_username","id":"_username","isPrivate":true},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_password","refId":"sqljocky/_AuthHandler/_password"},"kind":"param","name":"_password","id":"_password","isPrivate":true},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_db","refId":"sqljocky/_AuthHandler/_db"},"kind":"param","name":"_db","id":"_db","isPrivate":true},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"initializedField":{"name":"_scrambleBuffer","refId":"sqljocky/_AuthHandler/_scrambleBuffer"},"kind":"param","name":"_scrambleBuffer","id":"_scrambleBuffer","isPrivate":true,"line":"13"},{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"_clientFlags","refId":"sqljocky/_AuthHandler/_clientFlags"},"kind":"param","name":"_clientFlags","id":"_clientFlags","isPrivate":true,"line":"13"},{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"_maxPacketSize","refId":"sqljocky/_AuthHandler/_maxPacketSize"},"kind":"param","name":"_maxPacketSize","id":"_maxPacketSize","isPrivate":true,"line":"14"},{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"_collation","refId":"sqljocky/_AuthHandler/_collation"},"kind":"param","name":"_collation","id":"_collation","isPrivate":true,"line":"14"}],"line":"12"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/auth/auth_handler.dart","line":"3"},{"superclass":{"name":"_Handler","refId":"sqljocky/_Handler"},"kind":"class","name":"_HandshakeHandler","id":"_HandshakeHandler","children":[{"returnType":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"method","name":"createRequest","id":"createRequest0()","comment":"\nThe server initiates the handshake after the client connects,\nso a request will never be created.\n","line":"25"},{"returnType":{"name":"_HandlerResponse","refId":"sqljocky/_HandlerResponse"},"kind":"method","name":"processResponse","id":"processResponse1()","comment":"\nAfter receiving the handshake packet, if all is well, an [_AuthHandler]\nis created and returned to handle authentication.\n\nCurrently, if the client protocol version is not 4.1, an\nexception is thrown.\n","children":[{"ref":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"param","name":"response","id":"response"}],"line":"36"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_user","id":"_user","isPrivate":true,"line":"4"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_password","id":"_password","isPrivate":true,"line":"5"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_db","id":"_db","isPrivate":true,"line":"6"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"protocolVersion","id":"protocolVersion","line":"8"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"serverVersion","id":"serverVersion","line":"9"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"threadId","id":"threadId","line":"10"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"variable","name":"scrambleBuffer","id":"scrambleBuffer","line":"11"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"serverCapabilities","id":"serverCapabilities","line":"12"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"serverLanguage","id":"serverLanguage","line":"13"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"serverStatus","id":"serverStatus","line":"14"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"scrambleLength","id":"scrambleLength","line":"15"},{"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_user","refId":"sqljocky/_HandshakeHandler/_user"},"kind":"param","name":"_user","id":"_user","isPrivate":true},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_password","refId":"sqljocky/_HandshakeHandler/_password"},"kind":"param","name":"_password","id":"_password","isPrivate":true},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"db","id":"db"}],"line":"17"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/auth/handshake_handler.dart","line":"3"},{"superclass":{"name":"_Handler","refId":"sqljocky/_Handler"},"kind":"class","name":"_QuitHandler","id":"_QuitHandler","children":[{"returnType":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"method","name":"createRequest","id":"createRequest0()","line":"8"},{"kind":"method","name":"processResponse","id":"processResponse1()","children":[{"ref":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"param","name":"response","id":"response"}],"line":"14"},{"kind":"constructor","name":"","id":"0()","line":"4"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/handlers/quit_handler.dart","line":"3"},{"superclass":{"name":"_Handler","refId":"sqljocky/_Handler"},"kind":"class","name":"_DebugHandler","id":"_DebugHandler","children":[{"returnType":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"method","name":"createRequest","id":"createRequest0()","line":"8"},{"kind":"constructor","name":"","id":"0()","line":"4"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/handlers/debug_handler.dart","line":"3"},{"superclass":{"name":"_Handler","refId":"sqljocky/_Handler"},"kind":"class","name":"_PingHandler","id":"_PingHandler","children":[{"returnType":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"method","name":"createRequest","id":"createRequest0()","line":"8"},{"kind":"constructor","name":"","id":"0()","line":"4"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/handlers/ping_handler.dart","line":"3"},{"superclass":{"name":"_Handler","refId":"sqljocky/_Handler"},"kind":"class","name":"_UseDbHandler","id":"_UseDbHandler","children":[{"returnType":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"method","name":"createRequest","id":"createRequest0()","line":"10"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_dbName","id":"_dbName","isPrivate":true,"line":"4"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_dbName","refId":"sqljocky/_UseDbHandler/_dbName"},"kind":"param","name":"_dbName","id":"_dbName","isPrivate":true}],"line":"6"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/handlers/use_db_handler.dart","line":"3"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"_Handler","id":"_Handler","comment":"\nEach command which the mysql protocol implements is handled with a [_Handler] object.\nA handler is created with the appropriate parameters when the command is invoked\nfrom the connection. The transport is then responsible for sending the\nrequest which the handler creates, and then parsing the result returned by \nthe mysql server, either synchronously or asynchronously.\n","children":[{"returnType":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"method","name":"createRequest","id":"createRequest0()","comment":"\nReturns a [Buffer] containing the command packet.\n","line":"41"},{"returnType":{"name":"_HandlerResponse","refId":"sqljocky/_HandlerResponse"},"kind":"method","name":"processResponse","id":"processResponse1()","comment":"\nParses a [Buffer] containing the response to the command.\nReturns a [_HandlerResponse]. The default\nimplementation returns a finished [_HandlerResponse] with\na result which is obtained by calling [checkResponse] \n","children":[{"ref":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"param","name":"response","id":"response"}],"line":"49"},{"kind":"method","name":"checkResponse","id":"checkResponse2()","comment":"\nParses the response packet to recognise Ok and Error packets.\nReturns an [_OkPacket] if the packet was an Ok packet, throws\na [MySqlException] if it was an Error packet, or returns [:null:] \nif the packet has not been handled by this method.\n","children":[{"ref":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"param","name":"response","id":"response"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"kind":"param","name":"prepareStmt","id":"prepareStmt"}],"line":"59"},{"ref":{"name":"Logger","refId":"logging/Logger"},"kind":"variable","name":"log","id":"log","line":"36"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/handlers/handler.dart","line":"35"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_HandlerResponse","id":"_HandlerResponse","comment":"\nRepresents the response from a [_Handler] when [_Handler.processResponse] is\ncalled. If the handler has finished processing the response, [finished] is true,\n[nextHandler] is irrelevant and [result] contains the result to return to the\nuser. If the handler needs another handler to process the response, [finished]\nis false, [nextHandler] contains the next handler which should process the\nnext packet from the server, and [result] is [_NO_RESULT].\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"hasResult","id":"hasResult","line":"21"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"finished","id":"finished","line":"17"},{"ref":{"name":"_Handler","refId":"sqljocky/_Handler"},"isFinal":true,"kind":"variable","name":"nextHandler","id":"nextHandler","line":"18"},{"isFinal":true,"kind":"variable","name":"result","id":"result","line":"19"},{"ref":{"name":"_HandlerResponse","refId":"sqljocky/_HandlerResponse"},"isStatic":true,"isFinal":true,"kind":"variable","name":"notFinished","id":"notFinished","line":"25"},{"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"initializedField":{"name":"finished","refId":"sqljocky/_HandlerResponse/finished"},"kind":"param","name":"finished","id":"finished"},{"ref":{"name":"_Handler","refId":"sqljocky/_Handler"},"defaultValue":"null","isOptional":true,"isNamed":true,"initializedField":{"name":"nextHandler","refId":"sqljocky/_HandlerResponse/nextHandler"},"kind":"param","name":"nextHandler","id":"nextHandler"},{"defaultValue":"_NO_RESULT","isOptional":true,"isNamed":true,"initializedField":{"name":"result","refId":"sqljocky/_HandlerResponse/result"},"kind":"param","name":"result","id":"result"}],"line":"23"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/handlers/handler.dart","line":"16"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_NoResult","id":"_NoResult","children":[{"kind":"constructor","name":"","id":"0()","line":"4"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/handlers/handler.dart","line":"3"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_OkPacket","id":"_OkPacket","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"22"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"affectedRows","id":"affectedRows","line":"9"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"insertId","id":"insertId","line":"10"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"serverStatus","id":"serverStatus","line":"11"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"message","id":"message","line":"12"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_affectedRows","id":"_affectedRows","isPrivate":true,"line":"4"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_insertId","id":"_insertId","isPrivate":true,"line":"5"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_serverStatus","id":"_serverStatus","isPrivate":true,"line":"6"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_message","id":"_message","isPrivate":true,"line":"7"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"param","name":"buffer","id":"buffer"}],"line":"14"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/handlers/ok_packet.dart","line":"3"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_ParameterPacket","id":"_ParameterPacket","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"type","id":"type","line":"10"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"flags","id":"flags","line":"11"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"decimals","id":"decimals","line":"12"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"13"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_type","id":"_type","isPrivate":true,"line":"5"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_flags","id":"_flags","isPrivate":true,"line":"6"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_decimals","id":"_decimals","isPrivate":true,"line":"7"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_length","id":"_length","isPrivate":true,"line":"8"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"param","name":"buffer","id":"buffer"}],"line":"15"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/handlers/parameter_packet.dart","line":"4"},{"superclass":{"name":"Error","refId":"dart.core/Error"},"isThrowable":true,"kind":"class","name":"MySqlClientError","id":"MySqlClientError","comment":"\n[MySqlClientError] is thrown when the client is used improperly.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"14"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"message","id":"message","line":"7"},{"kind":"constructor","name":"_","id":"_1()","comment":"\nCreate a [MySqlClientError]\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"message","refId":"sqljocky/MySqlClientError/message"},"kind":"param","name":"message","id":"message"}],"isPrivate":true,"line":"12"}],"uri":"file:///home/james/devroot/sqljocky/lib/src/mysql_client_error.dart","line":"6"},{"superclass":{"name":"Error","refId":"dart.core/Error"},"isThrowable":true,"kind":"class","name":"MySqlProtocolError","id":"MySqlProtocolError","comment":"\n[MySqlProtocolError] is thrown when something unexpected is read from the the MySQL protocol.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"message","id":"message","line":"7"},{"kind":"constructor","name":"_","id":"_1()","comment":"\nCreate a [MySqlProtocolError]\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"message","refId":"sqljocky/MySqlProtocolError/message"},"kind":"param","name":"message","id":"message"}],"isPrivate":true,"line":"12"}],"uri":"file:///home/james/devroot/sqljocky/lib/src/mysql_protocol_error.dart","line":"6"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"isThrowable":true,"kind":"class","name":"MySqlException","id":"MySqlException","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"23"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"errorNumber","id":"errorNumber","line":"8"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"sqlState","id":"sqlState","line":"9"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"message","id":"message","line":"10"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_errorNumber","id":"_errorNumber","isPrivate":true,"line":"4"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_sqlState","id":"_sqlState","isPrivate":true,"line":"5"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_message","id":"_message","isPrivate":true,"line":"6"},{"kind":"constructor","name":"_","id":"_1()","comment":"\nCreate a [MySqlException] based on an error response from the mysql server\n","children":[{"ref":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"param","name":"buffer","id":"buffer"}],"isPrivate":true,"line":"15"}],"uri":"file:///home/james/devroot/sqljocky/lib/src/mysql_exception.dart","line":"3"},{"superclass":{"name":"Object+_ConnectionHelpers","refId":"sqljocky/Object+_ConnectionHelpers"},"kind":"class","name":"Query","id":"Query","comment":"\nQuery is created by ConnectionPool.prepare(sql) and Transaction.prepare(sql). It holds\na prepared query.\n","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"_Connection","refId":"sqljocky/_Connection"}]},"kind":"method","name":"_getConnection","id":"_getConnection0()","isPrivate":true,"line":"25"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"_PreparedQuery","refId":"sqljocky/_PreparedQuery"}]},"kind":"method","name":"_prepare","id":"_prepare1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"retainConnection","id":"retainConnection"}],"isPrivate":true,"line":"34"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_useCachedQuery","id":"_useCachedQuery2()","comment":"\nReturns true if there was already a cached query which has been used.\n","children":[{"ref":{"name":"_Connection","refId":"sqljocky/_Connection"},"kind":"param","name":"cnx","id":"cnx"},{"ref":{"name":"Completer","refId":"dart.async/Completer"},"kind":"param","name":"c","id":"c"}],"isPrivate":true,"line":"59"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_prepareAndCacheQuery","id":"_prepareAndCacheQuery3()","children":[{"ref":{"name":"_Connection","refId":"sqljocky/_Connection"},"kind":"param","name":"cnx","id":"cnx"},{"ref":{"name":"Completer","refId":"dart.async/Completer"},"kind":"param","name":"c","id":"c"},{"kind":"param","name":"retainConnection","id":"retainConnection"}],"isPrivate":true,"line":"70"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"87"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Results","refId":"results/Results"}]},"kind":"method","name":"execute","id":"execute1()","comment":"\nExecutes the query, returning a future [Results] object.\n","children":[{"ref":{"name":"List","refId":"dart.core/List"},"isOptional":true,"kind":"param","name":"values","id":"values"}],"line":"94"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Results","refId":"results/Results"}]},"kind":"method","name":"_execute","id":"_execute2()","children":[{"ref":{"name":"_PreparedQuery","refId":"sqljocky/_PreparedQuery"},"kind":"param","name":"preparedQuery","id":"preparedQuery"},{"ref":{"name":"List","refId":"dart.core/List"},"kind":"param","name":"values","id":"values"}],"isPrivate":true,"line":"107"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"Results","refId":"results/Results"}]}]},"kind":"method","name":"executeMulti","id":"executeMulti1()","comment":"\nExecutes the query once for each set of [parameters], and returns a future list\nof results, one for each set of parameters, that completes when the query has been executed.\n\nThe [Results] in the list contain their rows in the [Results.rows] field, rather than in the\n[Results.stream] field.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"List","refId":"dart.core/List"}]},"kind":"param","name":"parameters","id":"parameters"}],"line":"130"},{"kind":"method","name":"_removeConnection","id":"_removeConnection1()","children":[{"ref":{"name":"_Connection","refId":"sqljocky/_Connection"},"kind":"param","name":"cnx","id":"cnx"}],"isPrivate":true,"line":"159"},{"ref":{"name":"ConnectionPool","refId":"sqljocky/ConnectionPool"},"isFinal":true,"kind":"variable","name":"_pool","id":"_pool","isPrivate":true,"line":"8"},{"ref":{"name":"_Connection","refId":"sqljocky/_Connection"},"isFinal":true,"kind":"variable","name":"_cnx","id":"_cnx","isPrivate":true,"line":"9"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"sql","id":"sql","line":"10"},{"ref":{"name":"Logger","refId":"logging/Logger"},"isFinal":true,"kind":"variable","name":"log","id":"log","line":"11"},{"isFinal":true,"kind":"variable","name":"_inTransaction","id":"_inTransaction","isPrivate":true,"line":"12"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_executed","id":"_executed","isPrivate":true,"line":"13"},{"kind":"constructor","name":"_internal","id":"_internal2()","children":[{"ref":{"name":"ConnectionPool","refId":"sqljocky/ConnectionPool"},"initializedField":{"name":"_pool","refId":"sqljocky/Query/_pool"},"kind":"param","name":"_pool","id":"_pool","isPrivate":true},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"sql","refId":"sqljocky/Query/sql"},"kind":"param","name":"sql","id":"sql"}],"isPrivate":true,"line":"15"},{"kind":"constructor","name":"_forTransaction","id":"_forTransaction3()","children":[{"ref":{"name":"ConnectionPool","refId":"sqljocky/ConnectionPool"},"initializedField":{"name":"_pool","refId":"sqljocky/Query/_pool"},"kind":"param","name":"_pool","id":"_pool","isPrivate":true},{"ref":{"name":"_Connection","refId":"sqljocky/_Connection"},"kind":"param","name":"cnx","id":"cnx"},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"sql","refId":"sqljocky/Query/sql"},"kind":"param","name":"sql","id":"sql"}],"isPrivate":true,"line":"20"}],"uri":"file:///home/james/devroot/sqljocky/lib/src/query.dart","line":"7"},{"superclass":{"name":"ConnectionPool","refId":"sqljocky/ConnectionPool"},"kind":"class","name":"_TransactionPool","id":"_TransactionPool","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"_Connection","refId":"sqljocky/_Connection"}]},"kind":"method","name":"_getConnection","id":"_getConnection0()","isPrivate":true,"line":"97"},{"kind":"method","name":"_removeConnection","id":"_removeConnection1()","children":[{"ref":{"name":"_Connection","refId":"sqljocky/_Connection"},"kind":"param","name":"cnx","id":"cnx"}],"isPrivate":true,"line":"99"},{"ref":{"name":"_Connection","refId":"sqljocky/_Connection"},"isFinal":true,"kind":"variable","name":"cnx","id":"cnx","line":"93"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"_Connection","refId":"sqljocky/_Connection"},"initializedField":{"name":"cnx","refId":"sqljocky/_TransactionPool/cnx"},"kind":"param","name":"cnx","id":"cnx"}],"line":"95"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/transaction.dart","line":"92"},{"superclass":{"name":"Object+_ConnectionHelpers","refId":"sqljocky/Object+_ConnectionHelpers"},"interfaces":[{"name":"QueriableConnection","refId":"sqljocky/QueriableConnection"}],"kind":"class","name":"Transaction","id":"Transaction","comment":"\nStart a transaction by using [ConnectionPool.startTransaction]. Once a transaction\nis started it retains its connection until the transaction is committed or rolled\nback. You must use the [commit] and [rollback] methods to do this, otherwise\nthe connection will not be released back to the pool.\n","children":[{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"commit","id":"commit0()","comment":"\nCommits the transaction and released the connection. An error will be thrown\nif any queries are executed after calling commit.\n","line":"22"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"rollback","id":"rollback0()","comment":"\nRolls back the transaction and released the connection. An error will be thrown\nif any queries are executed after calling rollback.\n","line":"40"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Results","refId":"results/Results"}]},"kind":"method","name":"query","id":"query1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"sql","id":"sql"}],"line":"54"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Query","refId":"sqljocky/Query"}]},"kind":"method","name":"prepare","id":"prepare1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"sql","id":"sql"}],"line":"62"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Results","refId":"results/Results"}]},"kind":"method","name":"prepareExecute","id":"prepareExecute2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"sql","id":"sql"},{"ref":{"name":"List","refId":"dart.core/List"},"kind":"param","name":"parameters","id":"parameters"}],"line":"68"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_checkFinished","id":"_checkFinished0()","isPrivate":true,"line":"81"},{"kind":"method","name":"_removeConnection","id":"_removeConnection1()","children":[{"ref":{"name":"_Connection","refId":"sqljocky/_Connection"},"kind":"param","name":"cnx","id":"cnx"}],"isPrivate":true,"line":"87"},{"ref":{"name":"_Connection","refId":"sqljocky/_Connection"},"kind":"variable","name":"_cnx","id":"_cnx","isPrivate":true,"line":"10"},{"ref":{"name":"ConnectionPool","refId":"sqljocky/ConnectionPool"},"kind":"variable","name":"_pool","id":"_pool","isPrivate":true,"line":"11"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_finished","id":"_finished","isPrivate":true,"line":"12"},{"kind":"constructor","name":"_internal","id":"_internal2()","children":[{"ref":{"name":"_Connection","refId":"sqljocky/_Connection"},"initializedField":{"name":"_cnx","refId":"sqljocky/Transaction/_cnx"},"kind":"param","name":"_cnx","id":"_cnx","isPrivate":true},{"ref":{"name":"ConnectionPool","refId":"sqljocky/ConnectionPool"},"initializedField":{"name":"_pool","refId":"sqljocky/Transaction/_pool"},"kind":"param","name":"_pool","id":"_pool","isPrivate":true}],"isPrivate":true,"line":"16"}],"uri":"file:///home/james/devroot/sqljocky/lib/src/transaction.dart","line":"9"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_Connection","id":"_Connection","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"40"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"use","id":"use0()","line":"48"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"release","id":"release0()","line":"54"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"connect","id":"connect5()","comment":"\nConnects to the given [host] on [port], authenticates using [user]\nand [password] and connects to [db]. Returns a future which completes\nwhen this has happened. The future's value is an OkPacket if the connection\nis succesful.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"host","id":"host"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"port","id":"port"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"user","id":"user"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"password","id":"password","line":"66"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"db","id":"db","line":"66"}],"line":"65"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_readPacket","id":"_readPacket0()","isPrivate":true,"line":"93"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_handleHeader","id":"_handleHeader1()","children":[{"kind":"param","name":"buffer","id":"buffer"}],"isPrivate":true,"line":"101"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_handleData","id":"_handleData1()","children":[{"kind":"param","name":"buffer","id":"buffer"}],"isPrivate":true,"line":"110"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_finishAndReuse","id":"_finishAndReuse0()","isPrivate":true,"line":"140"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_sendBuffer","id":"_sendBuffer1()","children":[{"ref":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"param","name":"buffer","id":"buffer"}],"isPrivate":true,"line":"157"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[]},"kind":"method","name":"processHandler","id":"processHandler2()","comment":"\nProcesses a handler, from sending the initial request to handling any packets returned from\nmysql (unless [noResponse] is true).\n\nReturns a future\n","children":[{"ref":{"name":"_Handler","refId":"sqljocky/_Handler"},"kind":"param","name":"handler","id":"handler"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"noResponse","id":"noResponse"}],"line":"176"},{"returnType":{"name":"_PreparedQuery","refId":"sqljocky/_PreparedQuery"},"kind":"method","name":"removePreparedQueryFromCache","id":"removePreparedQueryFromCache1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"sql","id":"sql"}],"line":"189"},{"returnType":{"name":"_PreparedQuery","refId":"sqljocky/_PreparedQuery"},"kind":"method","name":"getPreparedQueryFromCache","id":"getPreparedQueryFromCache1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"sql","id":"sql"}],"line":"198"},{"kind":"method","name":"putPreparedQueryInCache","id":"putPreparedQueryInCache2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"sql","id":"sql"},{"ref":{"name":"_PreparedQuery","refId":"sqljocky/_PreparedQuery"},"kind":"param","name":"preparedQuery","id":"preparedQuery"}],"line":"202"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"inUse","id":"inUse","line":"46"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"HEADER_SIZE","id":"HEADER_SIZE","line":"4"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"STATE_PACKET_HEADER","id":"STATE_PACKET_HEADER","line":"5"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"STATE_PACKET_DATA","id":"STATE_PACKET_DATA","line":"6"},{"ref":{"name":"Logger","refId":"logging/Logger"},"isFinal":true,"kind":"variable","name":"log","id":"log","line":"7"},{"ref":{"name":"Logger","refId":"logging/Logger"},"isFinal":true,"kind":"variable","name":"lifecycleLog","id":"lifecycleLog","line":"8"},{"ref":{"name":"ConnectionPool","refId":"sqljocky/ConnectionPool"},"kind":"variable","name":"_pool","id":"_pool","isPrivate":true,"line":"10"},{"ref":{"name":"_Handler","refId":"sqljocky/_Handler"},"kind":"variable","name":"_handler","id":"_handler","isPrivate":true,"line":"11"},{"ref":{"name":"Completer","refId":"dart.async/Completer","arguments":[]},"kind":"variable","name":"_completer","id":"_completer","isPrivate":true,"line":"12"},{"ref":{"name":"BufferedSocket","refId":"buffered_socket/BufferedSocket"},"kind":"variable","name":"_socket","id":"_socket","isPrivate":true,"line":"14"},{"ref":{"name":"Buffer","refId":"buffer/Buffer"},"isFinal":true,"kind":"variable","name":"_headerBuffer","id":"_headerBuffer","isPrivate":true,"line":"16"},{"ref":{"name":"Buffer","refId":"buffer/Buffer"},"kind":"variable","name":"_dataBuffer","id":"_dataBuffer","isPrivate":true,"line":"17"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_readyForHeader","id":"_readyForHeader","isPrivate":true,"line":"18"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_packetNumber","id":"_packetNumber","isPrivate":true,"line":"20"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_dataSize","id":"_dataSize","isPrivate":true,"line":"22"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_user","id":"_user","isPrivate":true,"line":"24"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_password","id":"_password","isPrivate":true,"line":"25"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"number","id":"number","line":"26"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_inUse","id":"_inUse","isPrivate":true,"line":"28"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"autoRelease","id":"autoRelease","line":"29"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"inTransaction","id":"inTransaction","line":"30"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"_PreparedQuery","refId":"sqljocky/_PreparedQuery"}]},"isFinal":true,"kind":"variable","name":"_preparedQueryCache","id":"_preparedQueryCache","isPrivate":true,"line":"31"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"ConnectionPool","refId":"sqljocky/ConnectionPool"},"initializedField":{"name":"_pool","refId":"sqljocky/_Connection/_pool"},"kind":"param","name":"_pool","id":"_pool","isPrivate":true},{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"number","refId":"sqljocky/_Connection/number"},"kind":"param","name":"number","id":"number"}],"line":"33"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/connection.dart","line":"3"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"QueriableConnection","id":"QueriableConnection","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Results","refId":"results/Results"}]},"kind":"method","name":"query","id":"query1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"sql","id":"sql"}],"line":"334"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Query","refId":"sqljocky/Query"}]},"kind":"method","name":"prepare","id":"prepare1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"sql","id":"sql"}],"line":"335"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Results","refId":"results/Results"}]},"kind":"method","name":"prepareExecute","id":"prepareExecute2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"sql","id":"sql"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[]},"kind":"param","name":"parameters","id":"parameters"}],"line":"336"}],"uri":"file:///home/james/devroot/sqljocky/lib/src/connection_pool.dart","line":"333"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"_ConnectionHelpers","id":"_ConnectionHelpers","children":[{"kind":"method","name":"_releaseReuseCompleteError","id":"_releaseReuseCompleteError3()","children":[{"ref":{"name":"_Connection","refId":"sqljocky/_Connection"},"kind":"param","name":"cnx","id":"cnx"},{"ref":{"name":"Completer","refId":"dart.async/Completer"},"kind":"param","name":"c","id":"c"},{"kind":"param","name":"e","id":"e"}],"isPrivate":true,"line":"322"},{"kind":"method","name":"_removeConnection","id":"_removeConnection1()","children":[{"kind":"param","name":"cnx","id":"cnx"}],"isPrivate":true,"line":"330"}],"isPrivate":true,"uri":"file:///home/james/devroot/sqljocky/lib/src/connection_pool.dart","line":"321"},{"superclass":{"name":"Object+_ConnectionHelpers","refId":"sqljocky/Object+_ConnectionHelpers"},"interfaces":[{"name":"QueriableConnection","refId":"sqljocky/QueriableConnection"}],"kind":"class","name":"ConnectionPool","id":"ConnectionPool","comment":"\nMaintains a pool of database connections. When queries are executed, if there is\na free connection it will be used, otherwise the query is queued until a connection is\nfree. \n","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"_Connection","refId":"sqljocky/_Connection"}]},"kind":"method","name":"_getConnection","id":"_getConnection0()","isPrivate":true,"line":"44"},{"kind":"method","name":"_createConnection","id":"_createConnection1()","children":[{"ref":{"name":"Completer","refId":"dart.async/Completer"},"kind":"param","name":"c","id":"c"}],"isPrivate":true,"line":"68"},{"kind":"method","name":"_removeConnection","id":"_removeConnection1()","children":[{"ref":{"name":"_Connection","refId":"sqljocky/_Connection"},"kind":"param","name":"cnx","id":"cnx"}],"isPrivate":true,"line":"89"},{"kind":"method","name":"_newReuseConnection","id":"_newReuseConnection1()","comment":"\nAttempts to continue using a connection. If the connection isn't managed\nby this pool, or if the connection is already in use, nothing happens.\n\nIf there are operations which have been queued in this pool, starts\nto execute that operation. \n\nOtherwise, nothing happens.\n\n//TODO rename to something like processQueuedOperations??\n","children":[{"ref":{"name":"_Connection","refId":"sqljocky/_Connection"},"kind":"param","name":"cnx","id":"cnx"}],"isPrivate":true,"line":"104"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","comment":"\nCloses all open connections. \n\nWARNING: this will probably break things.\n","line":"146"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Results","refId":"results/Results"}]},"kind":"method","name":"query","id":"query1()","comment":"\nExecutes the [sql] query as soon as a connection is available, returning\na [Future<Results>] that completes when the results start to become available.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"sql","id":"sql"}],"line":"158"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"ping","id":"ping0()","comment":"\nPings the server. Returns a [Future] that completes when the server replies.\n","line":"180"},{"returnType":{"name":"Future","refId":"dart.async/Future"},"kind":"method","name":"debug","id":"debug0()","comment":"\nSends a debug message to the server. Returns a [Future] that completes\nwhen the server replies.\n","line":"197"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_closeQuery","id":"_closeQuery2()","children":[{"ref":{"name":"Query","refId":"sqljocky/Query"},"kind":"param","name":"q","id":"q"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"retain","id":"retain"}],"isPrivate":true,"line":"215"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"_Connection","refId":"sqljocky/_Connection"}]},"kind":"method","name":"_waitUntilReady","id":"_waitUntilReady1()","comment":"\nThe future returned by [_waitUntilReady] fires when all queued operations in the pool\nhave completed, and the connection is free to be used again.\n","children":[{"ref":{"name":"_Connection","refId":"sqljocky/_Connection"},"kind":"param","name":"cnx","id":"cnx"}],"isPrivate":true,"line":"234"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Query","refId":"sqljocky/Query"}]},"kind":"method","name":"prepare","id":"prepare1()","comment":"\nPrepares a query with the given [sql]. Returns a [Future<Query>] that\ncompletes when the query has been prepared.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"sql","id":"sql"}],"line":"249"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Transaction","refId":"sqljocky/Transaction"}]},"kind":"method","name":"startTransaction","id":"startTransaction1()","comment":"\nStarts a transaction. Returns a [Future<Transaction>] that completes\nwhen the transaction has been started. If [consistent] is true, the\ntransaction is started with consistent snapshot. A transaction holds\nonto its connection until closed (committed or rolled back). You\nmust use this method rather than query('start transaction') otherwise\nsubsequent queries may get executed on other connections which are not\nin the transaction. Likewise, you must use the [Transaction.commit]\nand [Transaction.rollback] methods to commit and roll back, otherwise\nthe connection will not be released.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"consistent","id":"consistent"}],"line":"269"},{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"Results","refId":"results/Results"}]},"kind":"method","name":"prepareExecute","id":"prepareExecute2()","comment":"\nPrepares and executes the [sql] with the given list of [parameters].\nReturns a [Future<Results>] that completes when the query has been\nexecuted.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"sql","id":"sql"},{"ref":{"name":"List","refId":"dart.core/List"},"kind":"param","name":"parameters","id":"parameters"}],"line":"300"},{"ref":{"name":"Logger","refId":"logging/Logger"},"isFinal":true,"kind":"variable","name":"log","id":"log","line":"9"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_host","id":"_host","isPrivate":true,"line":"11"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"_port","id":"_port","isPrivate":true,"line":"12"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_user","id":"_user","isPrivate":true,"line":"13"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_password","id":"_password","isPrivate":true,"line":"14"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_db","id":"_db","isPrivate":true,"line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_max","id":"_max","isPrivate":true,"line":"17"},{"ref":{"name":"Queue","refId":"dart.collection/Queue","arguments":[{"name":"Completer","refId":"dart.async/Completer","arguments":[{"name":"_Connection","refId":"sqljocky/_Connection"}]}]},"isFinal":true,"kind":"variable","name":"_pendingConnections","id":"_pendingConnections","isPrivate":true,"line":"24"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"_Connection","refId":"sqljocky/_Connection"}]},"isFinal":true,"kind":"variable","name":"_pool","id":"_pool","isPrivate":true,"line":"25"},{"kind":"constructor","name":"","id":"6()","comment":"\nCreates a [ConnectionPool]. When connections are required they will connect to the\n[db] on the given [host] and [port], using the [user] and [password]. The [max] number\nof simultaneous connections can also be specified.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"'localhost'","isOptional":true,"isNamed":true,"kind":"param","name":"host","id":"host"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"3306","isOptional":true,"isNamed":true,"kind":"param","name":"port","id":"port"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"user","id":"user"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"password","id":"password","line":"33"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"db","id":"db","line":"33"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"5","isOptional":true,"isNamed":true,"kind":"param","name":"max","id":"max","line":"33"}],"line":"32"}],"uri":"file:///home/james/devroot/sqljocky/lib/src/connection_pool.dart","line":"8"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Blob","id":"Blob","comment":"\nHolds blob data, and can be created or accessed as either a [String] or a [List] of ints.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns the value of the blob as a [String].\n","line":"28"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"toBytes","id":"toBytes0()","comment":"\nReturns the value of the blob as a list of bytes.\n","line":"38"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"56"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","line":"45"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_string","id":"_string","isPrivate":true,"line":"7"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"variable","name":"_bytes","id":"_bytes","isPrivate":true,"line":"8"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_hashcode","id":"_hashcode","isPrivate":true,"line":"9"},{"kind":"constructor","name":"fromString","id":"fromString1()","comment":"\nCreate a [Blob] from a [string].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"string","id":"string"}],"line":"14"},{"kind":"constructor","name":"fromBytes","id":"fromBytes1()","comment":"\nCreate a [Blob] from a list of [bytes].\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"}],"line":"21"}],"uri":"file:///home/james/devroot/sqljocky/lib/src/blob.dart","line":"6"}],"uri":"file:///home/james/devroot/sqljocky/lib/sqljocky.dart","line":"1"}